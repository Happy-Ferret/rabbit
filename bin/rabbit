#!/usr/bin/env ruby
# -*- ruby -*-

require "optparse"
require "ostruct"

require "rabbit/frame"
require "rabbit/source"
require "rabbit/logger"
require "rabbit/renderer"
require "rabbit/gettext"

Version = Rabbit::VERSION

def parse(args, logger)
  options = OpenStruct.new
  options.theme = "default"
  options.theme_specified = false
  options.base = nil
  options.source_type = Rabbit::Source::ARGF
  options.full_screen = false
  options.width = 800
  options.height = 600
  options.save_as_image = false
  options.saved_image_basename = nil
  options.saved_image_type = "png"
  options.encoding = "UTF-8"
  options.locale_dir = nil
  options.renderer = Rabbit::Renderer::DrawingArea

  default_logger = logger
  
  get_last_name = Proc.new do |klass|
    klass.name.split("::").last
  end
    
  opts = OptionParser.new do |opts|
    opts.banner = "#{opts.banner} SOURCE_INFOS"

    opts.separator ""

    opts.on("-I", "--include [PATH]",
            "Add [PATH] to load path") do |path|
      $LOAD_PATH.unshift(path)
    end
    
    opts.on("-t", "--theme [THEME]",
            "Use [THEME] as theme.",
            "(#{options.theme})") do |theme|
      options.theme = theme
      options.theme_specified = true
    end
    
    opts.separator ""

    source_type_names = Rabbit::Source.types.collect do |x|
      get_last_name[x].downcase
    end
    source_type_descs = Rabbit::Source.types.collect do |x|
      ["When select #{get_last_name[x]}",
       "specify #{x.initial_args_description}",
       "as SOURCE_INFOS.",
       " "]
    end.flatten
    opts.on("-T", "--type [TYPE]",
            source_type_names,
            "Specify source type as [TYPE].",
            "Select from [#{source_type_names.join(', ')}].",
            "Note: case insensitive.",
            "(#{get_last_name[options.source_type]})",
            " ",
            *source_type_descs) do |source_type|
      options.source_type = Rabbit::Source.types.find do |t|
        get_last_name[t].downcase == source_type.downcase
      end
    end

    opts.on("-e", "--encoding [ENCODING]",
            "Specify source encoding.",
            "(#{options.encoding})") do |encoding|
      options.encoding = encoding
    end

    opts.on("-B", "--base [BASE]",
            "Specify base URI or path of source as [BASE].",
            "(auto)") do |base|
      options.base = base
    end

    opts.on("-f", "--full-screen",
            "Turn on full screen mode.",
            "(#{options.full_screen})") do
      options.full_screen = true
    end

    opts.on("-w", "--width [WIDTH]",
            Integer,
            "Set window width to [WIDTH].",
            "(#{options.width})") do |width|
      options.width = width
    end

    opts.on("-h", "--height [HEIGHT]",
            Integer,
            "Set window height to [HEIGHT].",
            "(#{options.height})") do |height|
      options.height = height
    end

    opts.on("-S", "--size [WIDTH],[HEIGHT]",
            Array,
            "Set window width and height to",
            "[WIDTH] and [HEIGHT].",
            "(#{options.width},#{options.height})") do |size|
      width, height = size.collect{|x| Integer(x)}
      options.width = width
      options.height = height
    end

    opts.on("-s", "--save-as-image",
            "Save as image and exit.") do
      options.save_as_image = true
    end

    opts.on("-i", "--saved-image-type [TYPE]",
            "Specify saved image type as [TYPE].",
            "(#{options.saved_image_type})") do |t|
      options.saved_image_type = t
    end

    opts.on("-b", "--saved-image-basename [BASENAME]",
            "Specify saved image basename as [BASENAME].",
            "(Title of slide)") do |b|
      options.saved_image_basename = b
    end

    opts.separator ""
    
    opts.on("--locale-dir [DIR]",
            "Specify locale dir as [DIR].",
            "(auto)") do |d|
      options.locale_dir = d
    end
    
    logger_type_names = Rabbit::Logger.types.collect do |x|
      get_last_name[x].downcase
    end
    opts.on("--logger-type [TYPE]",
            logger_type_names,
            "Specify logger type as [TYPE].",
            "Select from [#{logger_type_names.join(', ')}].",
            "Note: case insensitive.",
            "(#{get_last_name[logger.class]})") do |logger_type|
      logger_class = Rabbit::Logger.types.find do |t|
        get_last_name[t].downcase == logger_type.downcase
      end
      if logger_class.nil?
        logger = default_logger
        # logger.error("Unknown logger type: #{t}")
      else
        logger = logger_class.new
      end
    end
    
    opts.separator ""
    
    opts.on_tail("--help", "Show this message") do
      logger.info(opts.to_s)
      exit
    end
  end

  begin
    opts.parse!(args)
  rescue
    logger.fatal($!.message)
  end

  [options, logger]
end

def make_source(options, argv, logger)
  if options.source_type == Rabbit::Source::ARGF
    infos = [ARGF]
  else
    infos = argv
  end
  options.source_type.new(options.encoding, logger, *infos)
end

Gtk.init

Rabbit::GetText.bindtextdomain

logger = Rabbit::Logger::STDERR.new

options, logger = parse(ARGV, logger)

Rabbit::GetText.bindtextdomain(options.locale_dir)

args = [options.width, options.height, true, logger, options.renderer]
frame = Rabbit::Frame.new(*args)
  
if options.theme_specified
  frame.apply_theme(options.theme)
end

source = make_source(options, ARGV, logger)
source.base = options.base
frame.parse_rd(source)
  
if options.full_screen
  frame.fullscreen
end

frame.saved_image_type = options.saved_image_type
frame.saved_image_basename = options.saved_image_basename

if options.save_as_image
  frame.unfullscreen
  frame.save_as_image
else
  Gtk.main
end
